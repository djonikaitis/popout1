% All possible experimental settings within this file;
%
% Produces stim structure which contains all stimuli settings and trial
% definitions

if ~isfield (expsetup.general, 'human_exp')
    expsetup.general.human_exp=1;
end


%% Different training stages have different stim durations

if isfield(expsetup.general, 'subject_id') && strcmp(expsetup.general.subject_id, 'aq')
elseif isfield(expsetup.general, 'subject_id') && strcmp(expsetup.general.subject_id, 'hb')
else
end

stim.training_stage_matrix = {...
    'saccade target hold increase', 'visually guided saccade', ...
    'target soa decrease', 'target soa 0', ...
    'fixation - target overlap increase', 'fixation - target overlap stable', ...
    'fixation - target overlap probability', ...
    'memory delay increase', 'target & distractor all combinations', 'popout', 'all target shapes', ...
    'final version'};


%% Variables for different training stages

% saccade target hold increase
stim.saccade_target_hold_duration_ini = 0.05;
stim.saccade_target_hold_duration_ini_step = 0.05;

% target soa
% distractor appears later than target, decrease soa until = 0
stim.target_soa_ini = 0.8;
stim.target_soa_ini_step = -0.02;

% memory delay increase
stim.memory_delay_ini = 0.1;
stim.memory_delay_ini_step = 0.05;

% fixation - target overlap duration
stim.fixation_overlap_duration_ini = 0.3;
stim.fixation_overlap_duration_ini_step = 0.03;

% fixation - target overlap probability
stim.fixation_overlap_probability_ini = 100; %  percent overlap trials
stim.fixation_overlap_probability_ini_step = -10;


%% Quick settings

% Specify target coordinates based on a RF mapping
stim.rf1_x = -6;
stim.rf1_y = -6;
stim.target_spacing_arc = 90;
stim.popout_spacing_arc = 30;

% Stimulus probabilities
stim.popout_probability = 70;
stim.st1_only_probability = 20;
stim.st2_only_probability = 20; 
stim.st1_st2_probability = 60; 

% Task and block
stim.main_cond{1} = 'st1 search';
stim.number_of_trials_per_block = 200;
stim.number_of_blocks = 10 * numel(stim.main_cond);
stim.main_cond_shuffle = 1; % 1 - shuffle, 2 - preset order


%%  Reward

% stim.reward_coeff1 = [460.0749   64.8784]; % Mount rack reward, measure as of 03.08.2016
stim.reward_coeff1 = [881.4887   -3.3301]; % Pump reward measure as of 10.19.2016

if isfield(expsetup.general, 'subject_id') && strcmp(expsetup.general.subject_id, 'aq')
    stim.reward_size_ml = 0.20; % Typical reward to start with
elseif isfield(expsetup.general, 'subject_id') && strcmp(expsetup.general.subject_id, 'hb')
    stim.reward_size_ml = 0.16; % Typical reward to start with
else
    stim.reward_size_ml = 0.20;
end
stim.reward_size_ms = round(polyval(stim.reward_coeff1, stim.reward_size_ml));
stim.reward_feedback = 3; % If 1 - show feedback;  2 - play audio feedback; 3 - audio feedback via arduino
stim.reward_feedback_audio_dur = 0.2; % How long to wait to give reward feedback
stim.reward_pic_size = [0, 0, 5, 5]; % If reward pic is shown, thats the size


%% Stimulus positions matrix

%=========
% TARGET

x = stim.rf1_x;
y = stim.rf1_y;
delta_arc = stim.target_spacing_arc;

% Recalcutlate to circle
[theta, rho] = cart2pol (x, y);
theta = (theta/pi)*180;

% Recalculate to the grid
target_arc = [theta:delta_arc:theta+359];
target_radius = [repmat(rho, 1, length(target_arc))];
[xc, yc] = pol2cart(target_arc*pi/180, target_radius);

% Save coordintes
stim.target_coord = [xc',yc'];

%==========
% POPOUT

x = stim.rf1_x;
y = stim.rf1_y;
delta_arc = stim.popout_spacing_arc;

% Recalcutlate to circle
[theta, rho] = cart2pol (x, y);
theta = (theta/pi)*180;

% Recalculate to the grid
target_arc = [theta:delta_arc:theta+359];
target_radius = [repmat(rho, 1, length(target_arc))];
[xc, yc] = pol2cart(target_arc*pi/180, target_radius);

% Save coordintes
stim.popout_coord = [xc',yc'];


%% Stimuli

%==============
% Fixation

% Fix position
stim.fixation_coord = [0,0]; % Fixation position in degrees from center

% Fix size
stim.fixation_size = [0,0,0.5,0.5]; % Size of fixation (degrees)
stim.fixation_pen = 4; % Fixation outline thickness (pixels)
stim.fixation_blink_frequency = 3; % How many time blinks per second;
stim.fixation_color = [20,20,20]; % Color of fixation or text on the screen
stim.fixation_shape = 'circle';
 
% Fixation duration
stim.fixation_acquire_duration = 0.5; % How long to show fixation before it is acquired
stim.fixation_maintain_duration = 0.5; % Time to maintain target before memory onset
stim.fixation_overlap_duration = 0.5; 
stim.fixation_overlap_probability = 50; % percent overlap trials

%===============
% Drif correction

stim.fixation_drift_correction_on = 1; % 1 - drift correction initiated
stim.fixation_size_drift = 5; % Larger fixation window for drift correction
stim.fixation_drift_maintain_minimum = 0.4; % Drift correction starts
stim.fixation_drift_maintain_maximum = 0.5; % Drift correction ends
if isfield(expsetup.general, 'subject_id') && strcmp(expsetup.general.subject_id(1:2), 'aq')
    stim.fixation_size_eyetrack = 2.5; % Window within which to maintain fixation
elseif isfield(expsetup.general, 'subject_id') && strcmp(expsetup.general.subject_id(1:2), 'hb')
    stim.fixation_size_eyetrack = 2.5; % Window within which to maintain fixation
else
    stim.fixation_size_eyetrack = 2.5; % Window within which to maintain fixation
end

%=======================
% Object sizes

stim.st1_size = [0,0,2,2]; % How big the object shown on the screen should be (DEGREES)
stim.st2_size = stim.st1_size;
stim.popout_size = stim.st1_size;
stim.rectangle_size_ratio = 3; % Horizontal to vertical ration for plotting oriented bars

%======================
% Memory target
stim.memory_coord_ini = [0,0];
stim.memory_pen_width = 10; % If empty shapes are drawn
stim.memory_duration = [0.5];
stim.memory_delay = [0.5];

%================
% Response objects

stim.response_saccade_accuracy = 5;
stim.response_duration = 0.99; % How fast to make a response
stim.saccade_target_hold_duration = 0.3; % How long fixation on the saccade target for it to be a good trial
stim.target_pen_width = 5; % If empty shapes are drawn
stim.target_soa = 0;

%=================
% Target colors
% Color/shape of st1 in line m is paired with color/shape of st2 in line m

% ST1 ini
stim.st1_color_ini = [20,150,20; 150,20,20]; % Color of the memory object
stim.st1_shape_ini{1} = 'rectangle';  % circle, square, empty_circle, empty_quare
stim.st1_shape_ini{2} = 'square';  % circle, square, empty_circle, empty_quare
stim.st1_angle_ini = [45; 0];

% ST2 ini
stim.st2_color_ini = [220,220,220; 20,150,20]; % Color of the memory object
stim.st2_shape_ini{1} = 'rectangle';  % circle, square, empty_circle, empty_quare
stim.st2_shape_ini{2} = 'circle';  % circle, square, empty_circle, empty_quare
stim.st2_angle_ini = [135; 0];

% Popout ini
stim.popout_color_ini = stim.st1_color_ini; % Color of the memory object
stim.popout_shape_ini{1} = 'rectangle';  % circle, square, empty_circle, empty_quare
stim.popout_shape_ini{2} = 'circle';  % circle, square, empty_circle, empty_quare
stim.popout_angle_ini = [0; 0];

%=================
% Target colors
% Color/shape of st1 in line m is paired with color/shape of st2 in line m

% % ST1
% stim.st1_color = [60,150,60; 60,60,150]; % Color of the memory object
% stim.st1_shape{1} = 'rectangle';
% stim.st1_shape{2} = 'rectangle';
% stim.st1_shape{3} = 'rectangle'; 
% stim.st1_angle = [45;0;60];
% 
% % ST2
% stim.st2_color = [220,220,220; 20,20,20]; % Color of the memory object
% stim.st2_shape{1} = 'rectangle';  % circle, square, empty_circle, empty_quare
% stim.st2_shape{2} = 'rectangle';  % circle, square, empty_circle, empty_quare
% stim.st2_shape{3} = 'rectangle';  % circle, square, empty_circle, empty_quare
% stim.st2_angle = [0;45;60];

%==============
% Stimulus probabilities

stim.st1_only_probability_ini = 100; % Percent single target
stim.st1_st2_probability_ini = 100; % Percent st1 and st2
stim.popout_probability_ini = 0; % Percent popout on


%==============
% Screen colors
stim.background_color = [180, 127, 127];

% %==============
% % Background texture
% stim.background_texture_line_pen = 2; % Width of lines
% stim.background_texture_line_color = [90,90,90];
% stim.background_texture_line_length = 2; % Length in degrees
% stim.background_texture_line_number = 10000; % Number of lines to be drawn;
% stim.background_texture_line_angle = [0:20:179];
% stim.background_texture_soa = -0.6; % Relative to memory onset; Negative - before memory onset;
% stim.background_texture_on = [ones(1, length(stim.background_texture_line_angle)), 0]; % 1 - texture on, 0 - no texture

%===============
% Duration of inter-trial
stim.trial_dur_intertrial = 0.1; % Blank screen at the end
stim.trial_dur_intertrial_error = 2; % Blank screen at the end

%================
% Staircase
stim.trial_online_counter_gradual = 3; % How many trials to count for updating task difficulty
stim.trial_correct_goal_up = 3; % What is accuracy to make task harder
stim.trial_correct_goal_down = 2; % What is accuracy to make task harder

% Other
stim.trial_error_repeat = 0; % 1 - repeats same trial if error occured immediatelly; 0 - no repeat
stim.trial_abort_counter = 20; % Quit experiment if trials in a row are aborted
stim.plot_every_x_trial = 1; % Every which trial to plot (every 1, 2nd, 10th etc trial)
stim.end_experiment = 0; % Default value 

% Picture file used for instruction
stim.instrpic{1}='image_condition1';
stim.instrpic{2}='image_condition2';

% Define expmatrix file (settings for each trial)
if ~isfield (stim, 'number_of_blocks')
    stim.number_of_trials_per_block = 500;
    stim.number_of_blocks = 2;
end


%% Settings that change on each trial (matrix; one trial = one row)

% Specify column names for expmatrix
stim.esetup_exp_version{1} = NaN; % Which task version participant is doing
stim.esetup_block_no = NaN; % Which block number (1:number of blocks)
stim.esetup_block_cond{1} = NaN; % Which blocked condition is presented

% Fixation
stim.esetup_fixation_coord(1,1:2) = NaN;
stim.esetup_fixation_color(1,1:3) = NaN;
stim.esetup_fixation_shape{1} = NaN;
stim.esetup_fixation_size(1,1:4) = NaN;
stim.esetup_fixation_size_drift(1,1:4) = NaN;
stim.esetup_fixation_size_eyetrack(1,1:4) = NaN;

% Fixation timing
stim.esetup_fixation_acquire_duration = NaN;
stim.esetup_fixation_maintain_duration = NaN;
stim.esetup_fixation_overlap_duration = NaN;
stim.esetup_fixation_overlap_on = NaN;
stim.esetup_total_fixation_duration = NaN; % From fixation acquired to fixation off


% Fixation drift parameters
stim.esetup_fixation_drift_correction_on = NaN; % Do drift correction or not?
stim.esetup_fixation_drift_offset(1,1:2) = NaN; % X-Y offset for the drift;

% Memory target and saccade targets
stim.esetup_memory_coord(1,1:2) = NaN;
stim.esetup_memory_size(1,1:4) = NaN;
stim.esetup_memory_color(1,1:3) = NaN;
stim.esetup_memory_shape{1} = NaN;
stim.esetup_memory_angle = NaN;
stim.esetup_memory_pen_width = NaN;

% Memory durations
stim.esetup_memory_duration = NaN; % Duration of memory target
stim.esetup_memory_delay = NaN; % Delay duration

% Target
stim.esetup_st1_coord(1,1:2) = NaN;
stim.esetup_st1_color(1,1:3) = NaN;
stim.esetup_st1_shape{1} = NaN;
stim.esetup_st1_size(1,1:4) = NaN;
stim.esetup_st1_angle = NaN;
stim.esetup_target_pen_width = NaN;

% Distractor
stim.esetup_st2_coord(1,1:2) = NaN;
stim.esetup_st2_color(1,1:3) = NaN;
stim.esetup_st2_color_level = NaN;
stim.esetup_st2_shape{1} = NaN;
stim.esetup_st2_size(1,1:4) = NaN;
stim.esetup_st2_angle = NaN;

% Targets-distractor common properties
stim.esetup_total_time_to_st_onset = NaN; % From fixation acquired to st on
stim.esetup_target_soa = NaN; % SOA between st1 & st2
stim.esetup_target_size_eyetrack(1,1:4) = NaN;
stim.esetup_target_number{1} = NaN; % How many targets
stim.esetup_saccade_target_hold_duration = NaN;

% Popout
stim.esetup_popout_on = NaN;
stim.esetup_popout_color(1,1:3) = NaN;
stim.esetup_popout_shape{1} = NaN;
stim.esetup_popout_size(1,1:4) = NaN;
stim.esetup_popout_angle = NaN;


% % Texture & background
% stim.esetup_background_texture_on = NaN; % Is texture shown
% stim.esetup_background_texture_line_angle = NaN;
% stim.esetup_background_texture_line_number = NaN;
% stim.esetup_background_texture_line_length = NaN;
% stim.esetup_xy_texture_combined{1} = NaN;
% stim.esetup_background_color(1,1:3) = NaN; % Is texture shown

% Stim timing recorded
stim.edata_first_display = NaN; 
stim.edata_loop_over = NaN; 

% Fixation
stim.edata_fixation_on = NaN; 
stim.edata_fixation_acquired = NaN; 
stim.edata_fixation_drift_maintained = NaN;
stim.edata_fixation_drift_calculated = NaN; % Moment when calculations of the drift are done
stim.edata_fixation_maintained = NaN; 
stim.edata_fixation_off = NaN; 

% Targets
stim.edata_st1_on = NaN;
stim.edata_st1_off = NaN;
stim.edata_st2_on = NaN;
stim.edata_st2_off = NaN;
stim.edata_response_acquired = NaN;
stim.edata_response_maintained = NaN;

% Other
stim.edata_memory_on = NaN;
stim.edata_memory_off = NaN;
% stim.edata_texture_on = NaN;

% Reward
stim.edata_reward_image_on = NaN;
stim.edata_reward_on = NaN;
stim.edata_reward_size_ms = NaN; % How much reward animal was given
stim.edata_reward_size_ml = NaN; % How much reward animal was given

% Variables for eyetracking plotting
stim.edata_eyelinkscreen_drift_on = NaN; % Drift stimulus window drawn on eyelink screen
stim.edata_eyelinkscreen_fixation = NaN; % Fixation after drift correction is done
stim.edata_eyelinkscreen_memory = NaN;
stim.edata_eyelinkscreen_st1 = NaN;
stim.edata_eyelinkscreen_st2 = NaN;


% Monitoring performance
stim.edata_error_code{1} = NaN;

stim.edata_trial_abort_counter = NaN;
stim.edata_trial_online_counter = NaN; % Error code


%% Settings that change on each frame (one trial = one cell; within cell - one row = one frame onscreen)

% Timingn and eye position
stim.eframes_time{1}(1) = NaN;
stim.eframes_eye_x{1}(1) = NaN;
stim.eframes_eye_y{1}(1) = NaN;
stim.eframes_eye_target{1}(1) = NaN;

% Other variables
stim.eframes_fixation{1}(1) = NaN;
stim.eframes_fixation_off{1}(1) = NaN;
stim.eframes_fixation_stops_blinking{1}(1) = NaN;
% stim.eframes_texture_on{1}(1) = NaN;
stim.eframes_memory_on{1}(1) = NaN;
stim.eframes_memory_off{1}(1) = NaN;
stim.eframes_st1_on{1}(1) = NaN;
stim.eframes_st2_on{1}(1) = NaN;
stim.eframes_st2_off{1}(1) = NaN;


%% Select current training stage

stim.training_stage_matrix_numbers = 1:numel(stim.training_stage_matrix);

if expsetup.general.debug>0
    stim.exp_version_temp = 'target soa decrease'; % Version you want to run
else
    a = input ('Select training stage by number. Enter 0 if you want to see the list: ');
    if a==0
        for i=1:numel(stim.training_stage_matrix)
            fprintf ('%d - %s\n', i, stim.training_stage_matrix{i})
        end
        b = input ('Select training stage by number: ');
        if b>numel(stim.training_stage_matrix)
            stim.exp_version_temp = stim.training_stage_matrix{end};
        else
            stim.exp_version_temp = stim.training_stage_matrix{b};
        end
    else
        stim.exp_version_temp = stim.training_stage_matrix{a};
    end
end

% In case code wont work, just un-comment and over-write:
% stim.exp_version_temp = 'final version'; % Version you want to run


%% Save into expsetup

expsetup.stim=stim;


